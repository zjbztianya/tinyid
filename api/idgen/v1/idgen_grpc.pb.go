// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdgenClient is the client API for Idgen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdgenClient interface {
	// SegmentId 段号模式获取ID
	SegmentId(ctx context.Context, in *SegmentRequest, opts ...grpc.CallOption) (*IdReply, error)
	// SnowflakeId 雪花算法模式获取ID
	SnowflakeId(ctx context.Context, in *SnowflakeRequest, opts ...grpc.CallOption) (*IdReply, error)
	// CurrentTime 获取本节点时间戳
	CurrentTime(ctx context.Context, in *CurrentTimeRequest, opts ...grpc.CallOption) (*CurrentTimeReply, error)
}

type idgenClient struct {
	cc grpc.ClientConnInterface
}

func NewIdgenClient(cc grpc.ClientConnInterface) IdgenClient {
	return &idgenClient{cc}
}

func (c *idgenClient) SegmentId(ctx context.Context, in *SegmentRequest, opts ...grpc.CallOption) (*IdReply, error) {
	out := new(IdReply)
	err := c.cc.Invoke(ctx, "/service.idgen.v1.Idgen/SegmentId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idgenClient) SnowflakeId(ctx context.Context, in *SnowflakeRequest, opts ...grpc.CallOption) (*IdReply, error) {
	out := new(IdReply)
	err := c.cc.Invoke(ctx, "/service.idgen.v1.Idgen/SnowflakeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idgenClient) CurrentTime(ctx context.Context, in *CurrentTimeRequest, opts ...grpc.CallOption) (*CurrentTimeReply, error) {
	out := new(CurrentTimeReply)
	err := c.cc.Invoke(ctx, "/service.idgen.v1.Idgen/CurrentTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdgenServer is the server API for Idgen service.
// All implementations must embed UnimplementedIdgenServer
// for forward compatibility
type IdgenServer interface {
	// SegmentId 段号模式获取ID
	SegmentId(context.Context, *SegmentRequest) (*IdReply, error)
	// SnowflakeId 雪花算法模式获取ID
	SnowflakeId(context.Context, *SnowflakeRequest) (*IdReply, error)
	// CurrentTime 获取本节点时间戳
	CurrentTime(context.Context, *CurrentTimeRequest) (*CurrentTimeReply, error)
	mustEmbedUnimplementedIdgenServer()
}

// UnimplementedIdgenServer must be embedded to have forward compatible implementations.
type UnimplementedIdgenServer struct {
}

func (UnimplementedIdgenServer) SegmentId(context.Context, *SegmentRequest) (*IdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SegmentId not implemented")
}
func (UnimplementedIdgenServer) SnowflakeId(context.Context, *SnowflakeRequest) (*IdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnowflakeId not implemented")
}
func (UnimplementedIdgenServer) CurrentTime(context.Context, *CurrentTimeRequest) (*CurrentTimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentTime not implemented")
}
func (UnimplementedIdgenServer) mustEmbedUnimplementedIdgenServer() {}

// UnsafeIdgenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdgenServer will
// result in compilation errors.
type UnsafeIdgenServer interface {
	mustEmbedUnimplementedIdgenServer()
}

func RegisterIdgenServer(s grpc.ServiceRegistrar, srv IdgenServer) {
	s.RegisterService(&Idgen_ServiceDesc, srv)
}

func _Idgen_SegmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdgenServer).SegmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.idgen.v1.Idgen/SegmentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdgenServer).SegmentId(ctx, req.(*SegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Idgen_SnowflakeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnowflakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdgenServer).SnowflakeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.idgen.v1.Idgen/SnowflakeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdgenServer).SnowflakeId(ctx, req.(*SnowflakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Idgen_CurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdgenServer).CurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.idgen.v1.Idgen/CurrentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdgenServer).CurrentTime(ctx, req.(*CurrentTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Idgen_ServiceDesc is the grpc.ServiceDesc for Idgen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Idgen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.idgen.v1.Idgen",
	HandlerType: (*IdgenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SegmentId",
			Handler:    _Idgen_SegmentId_Handler,
		},
		{
			MethodName: "SnowflakeId",
			Handler:    _Idgen_SnowflakeId_Handler,
		},
		{
			MethodName: "CurrentTime",
			Handler:    _Idgen_CurrentTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idgen.proto",
}
